# Generated by Django 4.2.21 on 2025-05-26 18:57

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('asset_type', models.CharField(choices=[('EQUIPMENT', 'Equipment'), ('VEHICLE', 'Vehicle'), ('FURNITURE', 'Furniture'), ('BUILDING', 'Building'), ('LAND', 'Land'), ('SOFTWARE', 'Software'), ('IP', 'Intellectual Property'), ('OTHER', 'Other')], max_length=12)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('salvage_value', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('depreciation_method', models.CharField(choices=[('STRAIGHT', 'Straight Line'), ('DECLINING', 'Declining Balance'), ('ACCELERATED', 'Accelerated'), ('NONE', 'No Depreciation')], default='STRAIGHT', max_length=12)),
                ('useful_life_years', models.PositiveIntegerField(default=5)),
                ('depreciation_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('purchase_date', models.DateField()),
                ('in_service_date', models.DateField()),
                ('disposal_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('condition', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('VIEW', 'View'), ('EXPORT', 'Export'), ('IMPORT', 'Import'), ('SYNC', 'Synchronization')], max_length=6)),
                ('table_name', models.CharField(max_length=100)),
                ('record_id', models.CharField(max_length=100)),
                ('object_id', models.CharField(max_length=100)),
                ('field_changes', models.JSONField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('period_type', models.CharField(choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUALLY', 'Annually')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_income_budget', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('total_expense_budget', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='BudgetLineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('budgeted_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category__name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Category name (e.g., 'Office Supplies', 'Client Payments')", max_length=100)),
                ('type', models.CharField(choices=[('INC', 'Income'), ('EXP', 'Expense'), ('AST', 'Asset'), ('LIA', 'Liability'), ('EQT', 'Equity')], help_text='Primary categorization for financial reporting', max_length=3)),
                ('is_tax_deductible', models.BooleanField(default=False, help_text='Mark if this category represents tax-deductible expenses')),
                ('tax_code', models.CharField(blank=True, help_text='Tax jurisdiction specific code for reporting', max_length=20)),
                ('is_system_default', models.BooleanField(default=False, help_text='System-provided categories that apply to all profiles')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order within parent category')),
                ('description', models.TextField(blank=True, help_text='Detailed description of category usage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['parent__name', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Client business or individual name', max_length=200)),
                ('email', models.EmailField(blank=True, help_text='Primary email for invoices and communication', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Primary phone number', max_length=20)),
                ('address_line1', models.CharField(blank=True, max_length=100)),
                ('address_line2', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('state_province', models.CharField(blank=True, max_length=50)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Maximum credit allowed for this client', max_digits=12)),
                ('payment_terms_days', models.PositiveIntegerField(default=30, help_text='Default payment terms in days (Net 30, etc.)')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Default discount percentage for this client', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tax_id', models.CharField(blank=True, help_text="Client's tax identification number", max_length=50)),
                ('currency', models.CharField(default='USD', help_text='Preferred currency for transactions', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_transaction_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this client')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount in specified currency', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('currency', models.CharField(default='USD', help_text='ISO 4217 currency code', max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=6, default=Decimal('1.0'), help_text="Exchange rate to profile's base currency", max_digits=10)),
                ('type', models.CharField(choices=[('IN', 'Income'), ('EX', 'Expense'), ('TR', 'Transfer'), ('ADJ', 'Adjustment')], help_text='Primary transaction classification', max_length=3)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('BANK', 'Bank Transfer'), ('MOBILE', 'Mobile Money'), ('CHEQUE', 'Cheque'), ('WALLET', 'Digital Wallet'), ('CRYPTO', 'Cryptocurrency'), ('OTHER', 'Other')], default='CASH', help_text='How the transaction was executed', max_length=6)),
                ('description', models.CharField(help_text='Brief description of the transaction', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Detailed notes or memo')),
                ('reference_number', models.CharField(blank=True, help_text='External reference (check number, confirmation code, etc.)', max_length=100)),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Date when transaction occurred')),
                ('is_reconciled', models.BooleanField(default=False, help_text='Whether transaction has been reconciled with bank statement')),
                ('is_tax_relevant', models.BooleanField(default=False, help_text='Whether transaction should be included in tax reporting')),
                ('is_synced', models.BooleanField(default=True, help_text='Synchronization status with mobile apps')),
                ('receipt_url', models.URLField(blank=True, help_text='URL to uploaded receipt or document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FinancialRatio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ratio_name', models.CharField(max_length=100)),
                ('ratio_type', models.CharField(choices=[('LIQUIDITY', 'Liquidity Ratio'), ('PROFIT', 'Profitability Ratio'), ('EFFICIENCY', 'Efficiency Ratio'), ('LEVERAGE', 'Leverage Ratio'), ('MARKET', 'Market Ratio')], max_length=10)),
                ('ratio_value', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('calculation_date', models.DateField()),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('industry_average', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('target_value', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('numerator', models.DecimalField(decimal_places=2, max_digits=15)),
                ('denominator', models.DecimalField(decimal_places=2, max_digits=15)),
                ('calculation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-calculation_date'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('goal_type', models.CharField(choices=[('SAVINGS', 'Savings Goal'), ('DEBT', 'Debt Reduction'), ('INVESTMENT', 'Investment Target'), ('EXPENSE', 'Expense Reduction'), ('INCOME', 'Income Increase'), ('EMERGENCY', 'Emergency Fund'), ('RETIREMENT', 'Retirement Planning'), ('OTHER', 'Other')], max_length=12)),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('current_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('target_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('PAUSED', 'Paused'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], default='ACTIVE', max_length=10)),
                ('is_automated', models.BooleanField(default=False)),
                ('milestone_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('reminder_frequency_days', models.PositiveIntegerField(default=7)),
                ('last_reminder_sent', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['target_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(help_text='Unique invoice number (auto-generated or custom)', max_length=50, unique=True)),
                ('reference', models.CharField(blank=True, help_text='Client reference or PO number', max_length=100)),
                ('issue_date', models.DateField(default=django.utils.timezone.now, help_text='Date invoice was issued')),
                ('due_date', models.DateField(help_text='Payment due date')),
                ('sent_date', models.DateTimeField(blank=True, help_text='Date invoice was sent to client', null=True)),
                ('payment_date', models.DateTimeField(blank=True, help_text='Date invoice was fully paid', null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Total before tax and discounts', max_digits=15)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Tax rate percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Calculated tax amount', max_digits=15)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Discount percentage applied', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Calculated discount amount', max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Final invoice total', max_digits=15)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Amount paid to date', max_digits=15)),
                ('notes', models.TextField(blank=True, help_text='Internal notes visible on invoice')),
                ('terms_and_conditions', models.TextField(blank=True, help_text='Payment terms and conditions')),
                ('footer_text', models.TextField(blank=True, help_text='Footer text for invoice')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('VIEWED', 'Viewed by Client'), ('PARTIAL', 'Partially Paid'), ('PAID', 'Paid'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], default='DRAFT', max_length=10)),
                ('currency', models.CharField(default='USD', help_text='Invoice currency', max_length=3)),
                ('template_name', models.CharField(default='default', help_text='Invoice template to use for PDF generation', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-issue_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceLineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(help_text='Product or service description', max_length=255)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity of product/service', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('total', models.DecimalField(decimal_places=2, help_text='Line total (quantity × unit_price)', max_digits=15)),
                ('unit_of_measure', models.CharField(blank=True, help_text='Unit of measure (hours, pieces, etc.)', max_length=20)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Line-specific discount percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order on invoice')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Invoice Line Item',
                'verbose_name_plural': 'Invoice Line Items',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('lender', models.CharField(max_length=200)),
                ('loan_type', models.CharField(choices=[('PERSONAL', 'Personal Loan'), ('BUSINESS', 'Business Loan'), ('MORTGAGE', 'Mortgage'), ('AUTO', 'Auto Loan'), ('CREDIT', 'Credit Card'), ('LOC', 'Line of Credit'), ('OTHER', 'Other')], max_length=10)),
                ('account_number', models.CharField(blank=True, max_length=50)),
                ('principal_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('annual_interest_rate', models.DecimalField(decimal_places=5, max_digits=8, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('interest_type', models.CharField(choices=[('SIMPLE', 'Simple Interest'), ('COMPOUND', 'Compound Interest'), ('REDUCING', 'Reducing Balance'), ('FLAT', 'Flat Rate')], max_length=10)),
                ('payment_frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('BIWEEKLY', 'Bi-weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMI_ANNUALLY', 'Semi-annually'), ('ANNUALLY', 'Annually')], default='MONTHLY', help_text='Frequency of loan payments', max_length=15)),
                ('number_of_payments', models.PositiveIntegerField()),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('origination_date', models.DateField()),
                ('first_payment_date', models.DateField()),
                ('maturity_date', models.DateField()),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('total_paid', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('payments_made', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('PAID_OFF', 'Paid Off'), ('DEFAULTED', 'Defaulted'), ('REFINANCED', 'Refinanced'), ('SUSPENDED', 'Suspended')], default='ACTIVE', max_length=12)),
                ('late_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('grace_period_days', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['maturity_date'],
            },
        ),
        migrations.CreateModel(
            name='LoanPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_number', models.PositiveIntegerField()),
                ('scheduled_date', models.DateField()),
                ('actual_date', models.DateField(blank=True, null=True)),
                ('scheduled_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('actual_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('principal_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('interest_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('late_fee', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('balance_after_payment', models.DecimalField(decimal_places=2, max_digits=15)),
                ('is_paid', models.BooleanField(default=False)),
                ('is_late', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['payment_number'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for privacy protection', primary_key=True, serialize=False, verbose_name='Profile ID')),
                ('name', models.CharField(blank=True, help_text='Optional profile display name', max_length=100)),
                ('profile_type', models.CharField(choices=[('BIZ', 'Business'), ('PERS', 'Personal')], default='PERS', help_text='Determines available features and UI', max_length=4)),
                ('pin_hash', models.CharField(help_text='SHA-256 hash of 4-digit PIN with application salt', max_length=128)),
                ('base_currency', models.CharField(default='USD', help_text='ISO 4217 currency code for primary calculations', max_length=3)),
                ('timezone', models.CharField(default='UTC', help_text='Timezone for date/time display', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Soft delete flag - inactive profiles cannot authenticate')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaxCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('treatment', models.CharField(choices=[('DEDUCTIBLE', 'Tax Deductible'), ('TAXABLE', 'Taxable Income'), ('TAX_FREE', 'Tax Free'), ('CAPITAL', 'Capital Gain'), ('DEPRECIATION', 'Depreciation')], max_length=12)),
                ('description', models.TextField(blank=True)),
                ('deduction_limit_annual', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('deduction_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Tax Categories',
            },
        ),
        migrations.CreateModel(
            name='TaxJurisdiction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('country_code', models.CharField(max_length=2)),
                ('tax_year_start', models.CharField(max_length=5)),
                ('standard_tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5)),
                ('vat_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'unique_together': {('name', 'country_code')},
            },
        ),
        migrations.CreateModel(
            name='TaxRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('record_type', models.CharField(choices=[('INCOME', 'Income Record'), ('DEDUCTION', 'Deduction Record'), ('CREDIT', 'Tax Credit'), ('PAYMENT', 'Tax Payment'), ('REFUND', 'Tax Refund')], max_length=10)),
                ('tax_year', models.PositiveIntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('deductible_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('description', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('documentation_required', models.BooleanField(default=False)),
                ('documentation_complete', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_by', models.CharField(blank=True, max_length=100)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('jurisdiction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_records', to='api.taxjurisdiction')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_records', to='api.profile')),
                ('tax_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_records', to='api.taxcategory')),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tax_records', to='api.enhancedtransaction')),
            ],
            options={
                'ordering': ['-tax_year', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='taxcategory',
            name='jurisdiction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_categories', to='api.taxjurisdiction'),
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('setting_type', models.CharField(choices=[('SYSTEM', 'System Setting'), ('PROFILE', 'Profile Setting'), ('TAX', 'Tax Setting'), ('NOTIFICATION', 'Notification Setting'), ('CALCULATION', 'Calculation Setting')], max_length=12)),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('decimal', 'Decimal'), ('boolean', 'Boolean'), ('json', 'JSON'), ('date', 'Date')], default='string', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='RecurringTransactionTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('type', models.CharField(choices=[('IN', 'Income'), ('EX', 'Expense'), ('TR', 'Transfer'), ('ADJ', 'Adjustment')], max_length=3)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('BANK', 'Bank Transfer'), ('MOBILE', 'Mobile Money'), ('CHEQUE', 'Cheque'), ('WALLET', 'Digital Wallet'), ('CRYPTO', 'Cryptocurrency'), ('OTHER', 'Other')], default='BANK', max_length=6)),
                ('frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('BIWEEKLY', 'Bi-weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMI_ANNUALLY', 'Semi-annually'), ('ANNUALLY', 'Annually')], default='MONTHLY', help_text='How often this transaction recurs', max_length=15)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('next_due_date', models.DateField()),
                ('auto_generate', models.BooleanField(default=False)),
                ('reminder_days_before', models.PositiveIntegerField(default=3)),
                ('is_active', models.BooleanField(default=True)),
                ('total_generated', models.PositiveIntegerField(default=0)),
                ('last_generated_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_templates', to='api.category')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_templates', to='api.profile')),
            ],
            options={
                'ordering': ['next_due_date'],
            },
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['profile_type'], name='api_profile_profile_5452a2_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['created_at'], name='api_profile_created_7369c0_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['is_active'], name='api_profile_is_acti_77260e_idx'),
        ),
        migrations.AddField(
            model_name='loanpayment',
            name='loan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.loan'),
        ),
        migrations.AddField(
            model_name='loan',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='api.profile'),
        ),
        migrations.AddField(
            model_name='invoicelineitem',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Category for expense tracking', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.category'),
        ),
        migrations.AddField(
            model_name='invoicelineitem',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='api.invoice'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='api.client'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='api.profile'),
        ),
        migrations.AddField(
            model_name='goal',
            name='linked_categories',
            field=models.ManyToManyField(blank=True, to='api.category'),
        ),
        migrations.AddField(
            model_name='goal',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='api.profile'),
        ),
        migrations.AddField(
            model_name='financialratio',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_ratios', to='api.profile'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='category',
            field=models.ForeignKey(help_text='Categorization for reporting and budgeting', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='api.category'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='client',
            field=models.ForeignKey(blank=True, help_text='Associated client for business transactions', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='api.client'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='invoice',
            field=models.ForeignKey(blank=True, help_text='Invoice this transaction pays against', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='api.invoice'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='parent_transaction',
            field=models.ForeignKey(blank=True, help_text='Parent transaction if this is a split', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='split_transactions', to='api.enhancedtransaction'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_transactions', to='api.profile'),
        ),
        migrations.AddField(
            model_name='enhancedtransaction',
            name='recurring_template',
            field=models.ForeignKey(blank=True, help_text='Template that generated this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_transactions', to='api.recurringtransactiontemplate'),
        ),
        migrations.AddField(
            model_name='client',
            name='profile',
            field=models.ForeignKey(help_text='Business profile that owns this client', on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='api.profile'),
        ),
        migrations.AddField(
            model_name='category',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Parent category for hierarchical organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='api.category'),
        ),
        migrations.AddField(
            model_name='category',
            name='profile',
            field=models.ForeignKey(blank=True, help_text='Leave blank for system default categories', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='api.profile'),
        ),
        migrations.AddField(
            model_name='budgetlineitem',
            name='budget',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='api.budget'),
        ),
        migrations.AddField(
            model_name='budgetlineitem',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budget_line_items', to='api.category'),
        ),
        migrations.AddField(
            model_name='budget',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budgets', to='api.profile'),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='api.profile'),
        ),
        migrations.AddField(
            model_name='asset',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='api.profile'),
        ),
        migrations.AddField(
            model_name='asset',
            name='purchase_transaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchased_assets', to='api.enhancedtransaction'),
        ),
        migrations.AddIndex(
            model_name='taxrecord',
            index=models.Index(fields=['profile', 'tax_year'], name='api_taxreco_profile_d3ec59_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrecord',
            index=models.Index(fields=['jurisdiction', 'tax_year'], name='api_taxreco_jurisdi_8508d7_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrecord',
            index=models.Index(fields=['record_type', 'tax_year'], name='api_taxreco_record__a5a495_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxcategory',
            unique_together={('jurisdiction', 'name')},
        ),
        migrations.AddIndex(
            model_name='systemsetting',
            index=models.Index(fields=['profile', 'setting_type'], name='api_systems_profile_549d66_idx'),
        ),
        migrations.AddIndex(
            model_name='systemsetting',
            index=models.Index(fields=['key'], name='api_systems_key_2266dd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='systemsetting',
            unique_together={('profile', 'key')},
        ),
        migrations.AddIndex(
            model_name='recurringtransactiontemplate',
            index=models.Index(fields=['profile', 'is_active'], name='api_recurri_profile_63f027_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringtransactiontemplate',
            index=models.Index(fields=['next_due_date'], name='api_recurri_next_du_8b60b3_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringtransactiontemplate',
            index=models.Index(fields=['auto_generate'], name='api_recurri_auto_ge_35a8be_idx'),
        ),
        migrations.AddIndex(
            model_name='loanpayment',
            index=models.Index(fields=['loan', 'payment_number'], name='api_loanpay_loan_id_cd58a6_idx'),
        ),
        migrations.AddIndex(
            model_name='loanpayment',
            index=models.Index(fields=['scheduled_date'], name='api_loanpay_schedul_c4fe28_idx'),
        ),
        migrations.AddIndex(
            model_name='loanpayment',
            index=models.Index(fields=['is_paid'], name='api_loanpay_is_paid_08ac5c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='loanpayment',
            unique_together={('loan', 'payment_number')},
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['profile', 'status'], name='api_loan_profile_1ec237_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['maturity_date'], name='api_loan_maturit_e3ec84_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['loan_type'], name='api_loan_loan_ty_68d320_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['profile', 'status'], name='api_invoice_profile_1d4569_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['client', 'status'], name='api_invoice_client__b56705_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='api_invoice_due_dat_8d5d97_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='api_invoice_invoice_59a3b3_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['issue_date'], name='api_invoice_issue_d_b078ad_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['profile', 'status'], name='api_goal_profile_6c9e6a_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['target_date'], name='api_goal_target__67a108_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['goal_type'], name='api_goal_goal_ty_675423_idx'),
        ),
        migrations.AddIndex(
            model_name='financialratio',
            index=models.Index(fields=['profile', 'ratio_type'], name='api_financi_profile_652624_idx'),
        ),
        migrations.AddIndex(
            model_name='financialratio',
            index=models.Index(fields=['calculation_date'], name='api_financi_calcula_35ac27_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='financialratio',
            unique_together={('profile', 'ratio_name', 'calculation_date')},
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['profile', 'date'], name='api_enhance_profile_9cc1aa_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['type', 'date'], name='api_enhance_type_91a6ed_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['category', 'date'], name='api_enhance_categor_734512_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['client', 'date'], name='api_enhance_client__403d53_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['is_tax_relevant'], name='api_enhance_is_tax__848a60_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtransaction',
            index=models.Index(fields=['is_reconciled'], name='api_enhance_is_reco_77d306_idx'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['profile', 'is_active'], name='api_client_profile_54afa2_idx'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['name'], name='api_client_name_6d373d_idx'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['email'], name='api_client_email_14fe36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='client',
            unique_together={('profile', 'email')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['profile', 'type'], name='api_categor_profile_b27421_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='api_categor_parent__d9272b_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_system_default'], name='api_categor_is_syst_c3a182_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('profile', 'name', 'parent')},
        ),
        migrations.AlterUniqueTogether(
            name='budgetlineitem',
            unique_together={('budget', 'category')},
        ),
        migrations.AddIndex(
            model_name='budget',
            index=models.Index(fields=['profile', 'status'], name='api_budget_profile_92dcbf_idx'),
        ),
        migrations.AddIndex(
            model_name='budget',
            index=models.Index(fields=['start_date', 'end_date'], name='api_budget_start_d_7f0b56_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['profile', 'timestamp'], name='api_auditlo_profile_d1059e_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action_type', 'timestamp'], name='api_auditlo_action__fb81b2_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['table_name', 'record_id'], name='api_auditlo_table_n_8b45a5_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['profile', 'asset_type'], name='api_asset_profile_39a820_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['purchase_date'], name='api_asset_purchas_130291_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['is_active'], name='api_asset_is_acti_dfa117_idx'),
        ),
    ]

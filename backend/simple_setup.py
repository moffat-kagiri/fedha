#!/usr/bin/env python3
"""
Local Network Setup Script for Fedha Backend
Makes the local server accessible over your network and updates the Flutter app configuration
"""

import os
import sys
import socket
import json
import argparse
import subprocess
from pathlib import Path

def get_local_ip():
    """Get the local IP address for network access"""
    try:
        # Connect to a remote address to determine local IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except Exception:
        # Fallback method if the above fails
        try:
            hostname = socket.gethostname()
            return socket.gethostbyname(hostname)
        except Exception:
            print("WARNING: Could not determine local IP address automatically")
            return "127.0.0.1"  # Localhost as last resort

def update_app_api_config(local_ip, port):
    """Update the Flutter app's API configuration"""
    # Navigate up to the project root, then to app/lib/config
    config_dir = os.path.join(os.path.dirname(__file__), "..", "app", "lib", "config")
    api_config_path = os.path.join(config_dir, "api_config.dart")
    
    local_url = f"{local_ip}:{port}"
    
    if not os.path.exists(api_config_path):
        print("Could not find API configuration file")
        return False
    
    print(f"Updating API config at: {api_config_path}")
    
    try:
        with open(api_config_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Look for the development factory method
        if 'factory ApiConfig.development()' in content:
            # Extract the block and replace the URL
            import re
            
            # Pattern to find development factory method
            pattern = r'factory ApiConfig\.development\(\)[^{]*\{[^}]*\}'
            match = re.search(pattern, content, re.DOTALL)
            
            if match:
                # Pattern to find the primaryApiUrl line
                url_pattern = r'primaryApiUrl:\s*[\'"]([^\'"]+)[\'"]'
                old_block = match.group(0)
                url_match = re.search(url_pattern, old_block)
                
                if url_match:
                    old_url = url_match.group(1)
                    new_block = old_block.replace(
                        f"primaryApiUrl: '{old_url}'",
                        f"primaryApiUrl: '{local_url}'"
                    )
                    updated_content = content.replace(old_block, new_block)
                    
                    with open(api_config_path, 'w', encoding='utf-8') as f:
                        f.write(updated_content)
                    
                    print(f"Updated API URL to: {local_url}")
                    return True
        
        print("WARNING: Could not automatically update API configuration")
        print(f"Please manually set your API URL to: {local_url}")
        return False
    
    except Exception as e:
        print(f"Error updating API config: {str(e)}")
        return False

def test_api_connectivity(url):
    """Test connectivity to the API"""
    print(f"Testing API connectivity to: {url}")
    
    try:
        import requests
        try:
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                print("Successfully connected to API")
                return True
            else:
                print(f"WARNING: API returned status code: {response.status_code}")
                return False
        except requests.RequestException as e:
            print(f"Could not connect to API: {str(e)}")
            return False
    except ImportError:
        print("WARNING: 'requests' module not available, skipping connectivity test")
        print("Install it with: pip install requests")
        return None

def create_test_file(local_ip, port):
    """Create a Dart test file to test connectivity from Flutter"""
    # Create test file in the app directory
    app_dir = os.path.join(os.path.dirname(__file__), "..", "app")
    test_file_path = os.path.join(app_dir, "test_local_network.dart")
    
    # Use normal string instead of f-string to avoid issues with curly braces
    test_content = """
// Generated by setup_local_network.py
// Tests connectivity to the local backend server

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Network Test',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const NetworkTestScreen(),
    );
  }
}

class NetworkTestScreen extends StatefulWidget {
  const NetworkTestScreen({Key? key}) : super(key: key);

  @override
  _NetworkTestScreenState createState() => _NetworkTestScreenState();
}

class _NetworkTestScreenState extends State<NetworkTestScreen> {
  String _result = "Press the button to test connection";
  bool _isLoading = false;

  Future<void> _testConnection() async {
    setState(() {
      _isLoading = true;
      _result = "Testing connection to local backend server...";
    });
    
    final url = 'http://SERVER_IP:PORT/api/health/';
    print('URL: $url');
    
    try {
      final response = await http.get(Uri.parse(url));
      
      print('Status code: ${response.statusCode}');
      print('Response: ${response.body}');
      
      if (response.statusCode == 200) {
        setState(() {
          _result = "Connection successful!\\n\\n${response.body}";
        });
      } else {
        setState(() {
          _result = "Connection returned non-200 status code\\n\\n${response.statusCode}\\n${response.body}";
        });
      }
    } catch (e) {
      print('Connection failed: $e');
      setState(() {
        _result = "Connection failed: $e\\n\\nTroubleshooting tips:\\n"
                 "1. Make sure backend server is running\\n"
                 "2. Check firewall settings\\n"
                 "3. Verify you're on the same network";
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Backend Connection Test')),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Testing connection to: SERVER_IP:PORT',
                style: const TextStyle(fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _isLoading ? null : _testConnection,
                child: _isLoading
                    ? const CircularProgressIndicator(color: Colors.white)
                    : const Text('Test Connection'),
              ),
              const SizedBox(height: 20),
              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: SingleChildScrollView(
                    child: Text(_result),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
"""
    
    # Replace the placeholders with the actual IP and port
    test_content = test_content.replace("SERVER_IP", local_ip)
    test_content = test_content.replace("PORT", str(port))
    
    with open(test_file_path, 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    print(f"Created test file at: {test_file_path}")
    print("Run it with: flutter run -d chrome --web-port=8080 test_local_network.dart")

def update_allowed_hosts(local_ip):
    """Update Django ALLOWED_HOSTS to include current local IP"""
    settings_path = os.path.join(os.path.dirname(__file__), "backend", "settings.py")
    
    if not os.path.exists(settings_path):
        settings_path = os.path.join(os.path.dirname(__file__), "fedha", "settings.py")
        
    if not os.path.exists(settings_path):
        print("Could not find Django settings file")
        return False
        
    try:
        with open(settings_path, 'r', encoding='utf-8') as f:
            settings_content = f.read()
            
        # Check if the IP is already in ALLOWED_HOSTS
        import re
        allowed_hosts_pattern = r'ALLOWED_HOSTS\s*=\s*\[(.*?)\]'
        match = re.search(allowed_hosts_pattern, settings_content, re.DOTALL)
        
        if match:
            hosts_str = match.group(1)
            # Simple check if the IP is already there
            if f"'{local_ip}'" in hosts_str or f'"{local_ip}"' in hosts_str:
                print(f"{local_ip} already in ALLOWED_HOSTS")
                return True
                
            # Add the IP to ALLOWED_HOSTS
            new_hosts_str = hosts_str
            if hosts_str.strip():
                if hosts_str.strip().endswith(','):
                    new_hosts_str = f"{hosts_str} '{local_ip}',"
                else:
                    new_hosts_str = f"{hosts_str}, '{local_ip}',"
            else:
                new_hosts_str = f"'{local_ip}',"
                
            new_allowed_hosts = f"ALLOWED_HOSTS = [{new_hosts_str}]"
            updated_content = settings_content.replace(
                match.group(0), 
                new_allowed_hosts
            )
            
            with open(settings_path, 'w', encoding='utf-8') as f:
                f.write(updated_content)
                
            print(f"Added {local_ip} to ALLOWED_HOSTS")
            return True
        else:
            print("Could not find ALLOWED_HOSTS in settings.py")
            return False
    
    except Exception as e:
        print(f"Error updating ALLOWED_HOSTS: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="Setup Fedha backend for local network access"
    )
    parser.add_argument('--port', type=int, default=8000, 
                       help='Port the Django server is running on (default: 8000)')
    args = parser.parse_args()
    
    print("Setting up local network access for Fedha backend...")
    
    local_ip = get_local_ip()
    if not local_ip or local_ip == "127.0.0.1":
        print("Could not determine network IP address")
        return 1
    
    print(f"Local network IP: {local_ip}")
    
    # Update Django's allowed hosts
    update_allowed_hosts(local_ip)
    
    # Update the app's API configuration
    update_app_api_config(local_ip, args.port)
    
    # Create a test file
    create_test_file(local_ip, args.port)
    
    # Print instructions
    print("\nSETUP COMPLETE")
    print("=" * 60)
    print(f"1. Start the Django server with: python manage.py runserver {local_ip}:{args.port}")
    print("2. Open the Flutter app and connect to the backend")
    print("=" * 60)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
